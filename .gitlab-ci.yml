variables:
  FF_NETWORK_PER_BUILD: 'true'
  IMAGE_NAME_AWS: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/juice-shop
  IMAGE_NAME: joellots/devsecops
  IMAGE_TAG: 1.1
  DOCKER_PASS: $DOCKER_PASS
  DOCKER_USER: $DOCKER_USER
  SERVER_IP: $SERVER_IP
  SERVER_USER: ubuntu

stages:
  - cache
  - test
  - build
  - deploy-test
  - cd-gitops

.slack_notification:
  after_script:
    - packagesNeeded='curl jq'
    - |
      if [ -x "$(command -v apk)" ]; then   
        apk --no-cache update && apk add --no-cache $packagesNeeded
      elif [ -x "$(command -v apt-get)" ]; then 
        apt-get update && apt-get install -y $packagesNeeded
      elif [ -x "$(command -v dnf)" ]; then 
        dnf update && dnf install -y $packagesNeeded
      elif [ -x "$(command -v zypper)" ]; then 
        zypper update && zypper install -y $packagesNeeded
      else 
        echo "FAILED TO INSTALL PACKAGE Package manager not found"
      fi
    - |
      if [ "$CI_JOB_STAGE" == "test" ] || [ "$CI_JOB_STAGE" == "build" ] || [ "$CI_JOB_STAGE" == "deploy" ]; then
      DEPLOYMENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") 
      VERSION=$(jq -r .version package.json)
      CI_JOB_STATUS_UPPER=${CI_JOB_STATUS^^}
      if [ "$CI_JOB_STATUS" == "success" ]; then
        EMOJI_STATUS=":white_check_mark:"
      else
        EMOJI_STATUS=":exclamation:"
      fi
      curl -X POST -H 'Content-type: application/json' --data "{
        \"text\": \"*Project:* $CI_PROJECT_NAME\n*App Version:* $VERSION\n*Job:* $CI_JOB_NAME\n*Stage:* $CI_JOB_STAGE\n*User:* $GITLAB_USER_NAME\n*Deployment Date:* $DEPLOYMENT_DATE\n*Status:* $CI_JOB_STATUS_UPPER $EMOJI_STATUS\n*Details:* <$CI_JOB_URL|Job Details>\",
        \"mrkdwn\": true
      }" $SLACK_WEBHOOK;
      fi

create-cache:
  image: node:22-bullseye
  stage: cache
  extends: .slack_notification
  script:
    - cd Juice-Shop
    - yarn install
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - yarn.lock
      - .yarn
    policy: pull-push


# yarn_test:
#   stage: test
#   image: node:22-bullseye
#   script:
#     - yarn install
#     - yarn test

gitleaks:
  stage: test
  image:
    name: zricethezav/gitleaks
    entrypoint: [""]
  extends: .slack_notification
  script:
    - gitleaks detect --verbose --source Juice-Shop -f json -r gitleaks.json
  allow_failure: true
  artifacts:
    paths:
      - gitleaks.json
    untracked: false
    when: always
    access: all
    expire_in: 30 days

njsscan:
  stage: test 
  image: python
  before_script:
    - pip3 install --upgrade njsscan
  extends: .slack_notification
  script:
    - njsscan --exit-warning Juice-Shop --sarif -o njsscan.sarif
  allow_failure: true
  artifacts:
    paths:
      - njsscan.sarif
    untracked: false
    when: always
    access: all
    expire_in: 30 days

semgrep:
  stage: test
  image: semgrep/semgrep
  extends: .slack_notification
  script: 
    - cd Juice-Shop
    - semgrep ci --json --output semgrep.json
  variables:
    SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN
  allow_failure: true
  artifacts:
    paths:
      - Juice-Shop/semgrep.json
    untracked: false
    when: always
    access: all
    expire_in: 30 days

retire:
  stage: test
  image: node:22-bullseye
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - yarn.lock
      - .yarn
    policy: pull
  before_script:
    - npm install -g retire
  extends: .slack_notification
  script:
    - retire --path Juice-Shop --outputformat json --outputpath retire.json
  allow_failure: true
  artifacts:
    paths:
      - retire.json
    untracked: false
    when: always
    access: all
    expire_in: 20 days

bandit:
  stage: test
  image: python
  before_script:
    - pip3 install bandit
  extends: .slack_notification
  script:
    - bandit -r Juice-Shop -f json -o bandit.json
  allow_failure: true
  artifacts:
    paths:
      - bandit.json
    untracked: false
    when: always
    access: all
    expire_in: 30 days

checkov:
  stage: test
  allow_failure: true  # True for AutoDevOps compatibility
  extends: .slack_notification
  image:
    name: bridgecrew/checkov:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.yml'
        - '**/*.yaml'
        - '**/*.json'
        - '**/*.template'
        - '**/*.tf'      
        - '**/serverless.yml'
        - '**/serverless.yaml'
  script:
    - checkov -d Juice-Shop -o junitxml | tee checkov.test.xml
  artifacts:
    reports:
      junit: "checkov.test.xml"
    paths:
      - "checkov.test.xml"



build_image:
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  extends: .slack_notification
  variables:
    # DOCKER_TLS_VERIFY: "1"
    # DOCKER_CERT_PATH: "/certs/client"
    # DOCKER_TLS_CERTDIR: "/certs"
    # DOCKER_HOST: "tcp://docker:2376" 
    
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN
  before_script:
    - unset DOCKER_HOST
    - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
    - apk --no-cache add python3 py3-pip    
    - apk --no-cache add aws-cli
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  script: 
    - docker build -t $IMAGE_NAME_AWS:$CI_COMMIT_SHA -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME_AWS:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest

trivy:
  stage: build
  needs: ["build_image"]
  image: docker:24
  services:
    - docker:24-dind
  extends: .slack_notification
  before_script:   
    - unset DOCKER_HOST
    - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
    # - apk --no-cache add python3 py3-pip
    # - pip3 install --no-cache-dir awscli
    - apk --no-cache update
    - apk --no-cache add curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.18.3
  script:
    - docker pull $IMAGE_NAME:latest
    - trivy image -f json -o trivy.json $IMAGE_NAME:latest #--exit-code 1 --severity HIGH,CRITICAL
  allow_failure: true
  artifacts:
    when: always
    paths:
      - trivy.json

syft_grype: 
  stage: build
  needs: ["build_image"]
  allow_failure: true
  image: docker:24
  services:
    - docker:24-dind
  extends: .slack_notification
  before_script:
    - unset DOCKER_HOST
    - apk --no-cache update
    - apk --no-cache add curl
    - curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    - curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
  script:
    - syft $IMAGE_NAME:latest -o syft-json | grype -o json | tee grype_output.json
  artifacts:
    when: always
    paths:
      - grype_output.json


upload_reports:
  stage: test
  image: python
  needs: ["gitleaks", "njsscan", "semgrep", "bandit", "retire"]
  when: always
  before_script:
    - pip3 install requests
  script:
    - python3 upload-reports.py gitleaks.json
    - python3 upload-reports.py njsscan.sarif
    - python3 upload-reports.py semgrep.json
    - python3 upload-reports.py bandit.json
    - python3 upload-reports.py retire.json
    - python3 upload-reports.py trivy.json
  tags: 
    - devsecops-runner

deploy_test:
  stage: deploy-test
  image: debian:bullseye-slim
  variables:
    SERVER_USER: ubuntu
    SERVER_IP: $SERVER_IP
  extends: .slack_notification
  before_script:
    - apt update -y && apt install openssh-client -y
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $IMAGE_NAME:latest"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop juice-shop || true && docker container rm juice-shop || true"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest"

zap:
  stage: deploy-test
  needs: ["deploy_test"]
  image: zaproxy/zap-weekly
  extends: .slack_notification
  variables:
    ZAP_TARGET: "http://$SERVER_IP:3000"
  before_script:
    - mkdir -p /zap/wrk
  script:
    - zap-baseline.py -t $ZAP_TARGET -g gen.conf -I -x baseline.xml
    - cp /zap/wrk/baseline.xml baseline.xml
  artifacts:
    when: always
    paths:
      - baseline.xml
    access: all
    expire_in: 30 days

cd-gitops:
  stage: cd-gitops
  needs: ["deploy_test"]
  image: alpine/git:latest
  extends: .slack_notification
  variables:
    VERSION: "$VERSION" 
  script:
    - echo "Deploying version $VERSION of Cerebro Application"

    - git config --global user.email "${GITLAB_USER_EMAIL:-$CI_JOB_TOKEN@gitlab.com}"
    - git config --global user.name "${GITLAB_USER_NAME:-ci-cd-pipeline}"

    - git clone https://${GIT_USER}:${GIT_PASS}@${GITOPS_REPO} gitops-cerebro
    - cd gitops-cerebro/base

    - 'sed -i "s|image: $REGISTRY:.*|image: ${REGISTRY}:${VERSION}|" deployment.yaml'
    - cat deployment.yaml

    - cd ..
    - git add .
    - git commit -m "Deploy Cerebro $VERSION via GitLab pipeline" || true
    - git branch -M main
    - git remote remove origin || true
    - git remote add origin https://${GIT_USER}:${GIT_PASS}@${GITOPS_REPO}
    - git push origin main || true

